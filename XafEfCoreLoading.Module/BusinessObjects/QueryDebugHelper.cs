using System;
using System.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;

namespace XafEfCoreLoading.Module.BusinessObjects
{
    /// <summary>
    /// Helper class for debugging EF Core queries with enhanced console output
    /// </summary>
    public static class QueryDebugHelper
    {
        /// <summary>
        /// Executes a query with detailed debug logging
        /// </summary>
        public static T ExecuteWithDebugLogging<T>(string operationName, Func<T> queryFunction)
        {
            var startTime = DateTime.Now;
            
            Debug.WriteLine($"");
            Debug.WriteLine($"?? === QUERY DEBUG START: {operationName} ===");
            Debug.WriteLine($"?? Start Time: {startTime:HH:mm:ss.fff}");
            
            Console.WriteLine($"");
            Console.WriteLine($"?? === QUERY DEBUG START: {operationName} ===");
            Console.WriteLine($"?? Start Time: {startTime:HH:mm:ss.fff}");

            TestLogger.WriteHeader($"QUERY DEBUG: {operationName}");
            TestLogger.WriteLine($"?? Start Time: {startTime:HH:mm:ss.fff}");

            try
            {
                var result = queryFunction();
                
                var endTime = DateTime.Now;
                var duration = endTime - startTime;
                
                Debug.WriteLine($"? Query completed successfully");
                Debug.WriteLine($"?? End Time: {endTime:HH:mm:ss.fff}");
                Debug.WriteLine($"??  Duration: {duration.TotalMilliseconds}ms");
                Debug.WriteLine($"?? === QUERY DEBUG END: {operationName} ===");
                Debug.WriteLine($"");

                Console.WriteLine($"? Query completed successfully");
                Console.WriteLine($"?? End Time: {endTime:HH:mm:ss.fff}");
                Console.WriteLine($"??  Duration: {duration.TotalMilliseconds}ms");
                Console.WriteLine($"?? === QUERY DEBUG END: {operationName} ===");
                Console.WriteLine($"");

                TestLogger.WriteLine($"? Query completed successfully");
                TestLogger.WriteLine($"?? End Time: {endTime:HH:mm:ss.fff}");
                TestLogger.WriteLine($"??  Duration: {duration.TotalMilliseconds}ms");
                TestLogger.WriteHeader($"QUERY DEBUG END: {operationName}");

                return result;
            }
            catch (Exception ex)
            {
                var endTime = DateTime.Now;
                var duration = endTime - startTime;
                
                Debug.WriteLine($"? Query failed with exception: {ex.Message}");
                Debug.WriteLine($"?? End Time: {endTime:HH:mm:ss.fff}");
                Debug.WriteLine($"??  Duration: {duration.TotalMilliseconds}ms");
                Debug.WriteLine($"?? === QUERY DEBUG END: {operationName} ===");
                
                Console.WriteLine($"? Query failed with exception: {ex.Message}");
                Console.WriteLine($"?? End Time: {endTime:HH:mm:ss.fff}");
                Console.WriteLine($"??  Duration: {duration.TotalMilliseconds}ms");
                Console.WriteLine($"?? === QUERY DEBUG END: {operationName} ===");

                TestLogger.WriteLine($"? Query failed with exception: {ex.Message}");
                TestLogger.WriteLine($"?? End Time: {endTime:HH:mm:ss.fff}");
                TestLogger.WriteLine($"??  Duration: {duration.TotalMilliseconds}ms");
                TestLogger.WriteHeader($"QUERY DEBUG END: {operationName}");
                
                throw;
            }
        }

        /// <summary>
        /// Logs the raw SQL generated by EF Core query
        /// </summary>
        public static void LogQuerySql<T>(IQueryable<T> query, string queryName = "Query")
        {
            try
            {
                var sql = query.ToQueryString();
                
                Debug.WriteLine($"?? === SQL for {queryName} ===");
                Debug.WriteLine(sql);
                Debug.WriteLine($"?? === END SQL ===");
                Debug.WriteLine("");

                Console.WriteLine($"?? === SQL for {queryName} ===");
                Console.WriteLine(sql);
                Console.WriteLine($"?? === END SQL ===");
                Console.WriteLine("");

                TestLogger.WriteSubHeader($"SQL for {queryName}");
                TestLogger.WriteLine(sql);
                TestLogger.WriteSubHeader("END SQL");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"? Could not generate SQL for {queryName}: {ex.Message}");
                Console.WriteLine($"? Could not generate SQL for {queryName}: {ex.Message}");
                TestLogger.WriteLine($"? Could not generate SQL for {queryName}: {ex.Message}");
            }
        }
    }
}